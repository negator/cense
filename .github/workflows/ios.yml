name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Build:    
    runs-on: macos-latest  
    steps:
      - uses: actions/checkout@v2
      - name: Checkout Cinch
        uses: actions/checkout@v3
        with:
          repository: negator/cinch
          token: ${{ secrets.CINCH_PERSONAL_ACCESS_TOKEN }}
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles      
      - name: Mount bazel cache
        uses: actions/cache@v3.0.8
        with:
          path: |
            "~/.cache/bazel"            
          key: ${{ runner.os }}-cinch      
      - name: Mount Pods cache
        uses: actions/cache@v3.0.8
        with:
          path: |
            "cinch/Pods"
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
      - name: Install Pods
        run: |
          gem install cocoapods-bazel
          pushd cinch          
          pod install
          popd
      - name: Build App
        run: |
          bazel --output_user_root=~/.cache/bazel build //:App
      - name: Test Rust
        run: |
          bazel test //rust/... 
  Deploy:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: "App"
      - name: Setup Environment Vars
        run: |
          echo "FIREBASE_TOKEN=${{secrets.FIREBASE_TOKEN}}" >> $GITHUB_ENV
          pwd
          ls -larth ./
      - name: Upload to Firebase App Distribution
        uses: w9jds/firebase-action@master
        with:
          args: appdistribution:distribute $GITHUB_WORKSPACE/cense.ipa --app ${{secrets.FIREBASE_APP_ID}} --groups naveen --release-notes "$GITHUB_REF_NAME"
