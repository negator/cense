name: iOS Build

on:
  repository_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Build:    
    runs-on: macos-latest  
    steps:
      - name: Set Branch Name
        run: |
          CINCH_REF="${{ github.event.client_payload.ref }}"
          PAYLOAD_REF_NAME="${{ github.event.client_payload.ref_name }}"
          CINCH_REF_NAME="${PAYLOAD_REF_NAME:=master}"
          echo "Building cinch branch: $CINCH_REF_NAME at $CINCH_REF"
          echo "cinch_ref=$CINCH_REF" >> $GITHUB_ENV
          echo "cinch_ref_name=$CINCH_REF_NAME" >> $GITHUB_ENV          
      - name: Checkout Cinch
        uses: actions/checkout@v3
        with:
          repository: negator/cinch
          ref: ${{ env.cinch_ref }}
          token: ${{ secrets.CINCH_PERSONAL_ACCESS_TOKEN }}
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          security find-identity

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Checkout actions/cache@v3
        uses: actions/checkout@v3
        with:
          repository: actions/cache
          ref: v3.0.10
          path: ./.tmp/actions/cache
      - name: Make actions/cache@v3 run always, not only when job succeeds
        # Tweak `action.yml` of `actions/cache@v3` to remove its `post-if`
        # condition, making it default to `post-if: always()`.
        run: |
          sed -i -e '/ post-if: /d' ./.tmp/actions/cache/action.yml          
      - name: Bazel cache
        if: always()
        id: bazel-cache
        uses: ./.tmp/actions/cache
        env:
          version: 5.3.1
        with:
          path: |
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ env.version }}-bazel-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.version }}-bazel-cache-${{ github.ref_name }}
            ${{ runner.os }}-${{ env.version }}-bazel-cache-main            
            ${{ runner.os }}-${{ env.version }}-bazel-cache-3236749821
      - name: Mount Pods cache
        id: pods-cache
        uses: actions/cache@v3.0.8
        with:
          path: |
            Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('Podfile') }}
      - name: Install Pods
        if: steps.pods-cache.outputs.cache-hit != 'true'
        run: |
          gem install cocoapods-bazel
          pod install
      - name: Set Build Number
        run: /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" cinch/Info.plist
      - name: Build App
        run: |
          bazel --output_user_root=~/.cache/bazel build -s --apple_platform_type=ios --ios_multi_cpus=arm64 //:App
          FILE=$(bazel --output_user_root=~/.cache/bazel cquery --output starlark --starlark:expr '"\n".join([f.path for f in target.files.to_list()])' //:App --apple_platform_type=ios --ios_multi_cpus=arm64)
          cp $FILE ./cense.ipa          
      - name: Test Rust
        run: |
          bazel --output_user_root=~/.cache/bazel test  --apple_platform_type=ios --ios_multi_cpus=arm64 //rust/...
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: "App"
          path: ./cense.ipa
          retention-days: 1    
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
  Deploy:
    if: ${{ github.event.client_payload.ref_name == 'master' || github.event.client_payload.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: "App"
      - name: Setup Environment Vars
        run: |
          echo "FIREBASE_TOKEN=${{secrets.FIREBASE_TOKEN}}" >> $GITHUB_ENV
          pwd
          ls -larth ./
      - name: Upload to Firebase App Distribution
        uses: w9jds/firebase-action@master
        with:
          args: appdistribution:distribute $GITHUB_WORKSPACE/cense.ipa --app ${{secrets.FIREBASE_APP_ID}} --groups naveen
